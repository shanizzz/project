<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Toolbox</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <script defer src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/zxcvbn/4.4.2/zxcvbn.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: url('https://picsum.photos/1920/1080?random=1') no-repeat center center fixed;
            background-size: cover;
            color: white;
            padding-bottom: 50px;
        }

        .container {
            max-width: 700px;
            padding: 20px;
            background: rgba(0, 0, 0, 0.85);
            border-radius: 12px;
            box-shadow: 0px 0px 15px rgba(255, 255, 255, 0.15);
            margin-top: 50px;
            color: white
        }

        h1 {
            font-size: 1.8rem;
            color: #ffcc00;
            font-weight: 700;
        }

        .form-control {
            font-size: 0.9rem;
            padding: 8px;
        }

        .btn {
            font-size: 0.9rem;
            padding: 8px;
            width: 100%;
        }

        .btn:hover {
            animation: pulse 1s infinite;
        }

        .toggle-password {
            cursor: pointer;
            margin-left: 8px;
            user-select: none;
        }

        .password-tips {
            position: fixed;
            top: 50px;
            right: 20px;
            padding: 10px;
            max-width: 280px;
            font-size: 0.9rem;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border-radius: 8px;
        }

        .password-tips h5 {
            color: #ffcc00;
            margin-bottom: 8px;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            z-index: -1;
        }

        .sha-info {
            position: fixed;
            top: 50px;
            left: 20px;
            padding: 12px;
            max-width: 250px;
            font-size: 0.9rem;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border-radius: 8px;
            box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.2);
        }

        .sha-info h5 {
            color: #ffcc00;
            margin-bottom: 8px;
        }

    </style>
</head>

<body>
    <div class="sha-info">
        <h5>üîê What is SHA-256?</h5>
        <p>SHA-256 is a cryptographic hash function that converts your password into a unique 256-bit hash. It's widely
            used for password security, blockchain, and data integrity.</p>
    </div>

    <div class="container text-center">
        <h1 class="mb-3"><b>PASSWORD TOOLBOX</b></h1>
        <p>Use this toolbox to generate, check, and secure your passwords effectively.</p>

        <div class="mb-2 d-flex">
            <input type="text" id="password" class="form-control" placeholder="Generated Password" readonly>
            <button class="btn btn-success ms-2" onclick="copyToClipboard('password')">Copy</button>
        </div>
        <button class="btn btn-primary mb-3" onclick="generatePassword()">Generate Password</button>

        <div class="mb-2 d-flex">
            <input type="password" id="checkPassword" class="form-control"
                placeholder="Enter password to check strength">
            <span class="toggle-password" onclick="toggleVisibility('checkPassword')">üëÅÔ∏è</span>
        </div>
        <button class="btn btn-secondary mb-2" type="button" onclick="checkStrength()">Check Strength</button>
        <p id="strengthResult" class="fw-bold"></p>

        <div class="mb-2 d-flex">
            <input type="password" id="leakPassword" class="form-control" placeholder="Check if password is leaked">
            <span class="toggle-password" onclick="toggleVisibility('leakPassword')">üëÅÔ∏è</span>
        </div>
        <button class="btn btn-danger mb-2" onclick="checkLeak()">Check Leak</button>
        <p id="leakResult" class="fw-bold"></p>
        <p id="breachCount" class="fw-bold"></p>


        <div class="mb-2 d-flex">
            <input type="password" id="hashPassword" class="form-control" placeholder="Enter password to hash">
            <span class="toggle-password" onclick="toggleVisibility('hashPassword')">üëÅÔ∏è</span>
        </div>
        <button class="btn btn-warning mb-2" onclick="generateHash()">Generate SHA-256 Hash</button>
        <p id="hashResult" class="fw-bold word-break"></p>
        <button class="btn btn-success" id="copyHashButton" onclick="copyHash()">Copy Hash</button>
    </div>

    <div class="container text-center mt-4 p-3"
        style="background: rgba(0, 0, 0, 0.85); border-radius: 12px; bottom: 5px;">
        <h1 class="text-warning">What is <b><span style="color: red;">Have I Been Pwned</span></b>?</h1>
        <p class="text-light">
            <strong>Have I Been Pwned (HIBP)</strong> is a database that collects and tracks leaked passwords and email
            breaches.
            It allows users to check if their credentials have been compromised in known security breaches.
            This tool helps enhance security by encouraging users to change weak or exposed passwords.
        </p>
        <a href="https://haveibeenpwned.com/" class="btn btn-info" target="_blank">Learn More</a>
    </div>

    <div class="password-tips">
        <h5>Password Security Tips:</h5>
        <ul class="custom-bullets">
            <li>‚úîÔ∏è Use a mix of uppercase, lowercase, numbers, and symbols.</li>
            <li>üîí Avoid using common words or easily guessed information.</li>
            <li>üõ†Ô∏è Use a password manager to store your credentials securely.</li>
            <li>üõ°Ô∏è Enable two-factor authentication (2FA) whenever possible.</li>
            <li>üîÑ Change your passwords regularly and never reuse old ones.</li>
        </ul>
    </div>



    <script>
        let generatedHash = ''; 

        function generatePassword() {
            let chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";
            let passwordLength = 12;
            let password = "";
            for (let i = 0; i < passwordLength; i++) {
                let randomIndex = Math.floor(Math.random() * chars.length);
                password += chars[randomIndex];
            }
            document.getElementById("password").value = password;
        }

        function copyToClipboard(elementId, isText = false) {
            let text = isText ? document.getElementById(elementId).textContent : document.getElementById(elementId).value;
            let button = event.target; 

    
            navigator.clipboard.writeText(text).then(() => {
                
                let originalText = button.innerText;
                let originalColor = button.style.backgroundColor;

                
                button.innerText = "Copied";
                button.style.backgroundColor = "#28a745"; 

                
                setTimeout(() => {
                    button.innerText = originalText;
                    button.style.backgroundColor = originalColor;
                }, 1000);
            }).catch(err => {
                console.error("Error copying text: ", err);
            });
        }

        function toggleVisibility(inputId) {
            let input = document.getElementById(inputId);
            input.type = input.type === "password" ? "text" : "password";
        }

        function checkStrength() {
            let password = document.getElementById("checkPassword").value;
            let strengthResult = document.getElementById("strengthResult");

            if (!password) {
                strengthResult.textContent = "Please enter a password.";
                strengthResult.style.color = "red";
                return;
            }

            let result = zxcvbn(password);
            let messages = ["Very Weak", "Weak", "Moderate", "Strong", "Very Strong"];
            let colors = ["red", "orange", "yellow", "green", "blue"];

            strengthResult.textContent = messages[result.score];
            strengthResult.style.color = colors[result.score];
        }

        async function checkLeak() {
            let password = document.getElementById("leakPassword").value;
            let leakResult = document.getElementById("leakResult");
            let breachCount = document.getElementById("breachCount");

            if (!password) {
                leakResult.textContent = "Please enter a password.";
                leakResult.style.color = "red";
                return;
            }

            let hashedPassword = CryptoJS.SHA1(password).toString().toUpperCase();
            let prefix = hashedPassword.substring(0, 5);
            let suffix = hashedPassword.substring(5);

            try {
                let response = await fetch(`https://api.pwnedpasswords.com/range/${prefix}`);
                let data = await response.text();
                let found = data.split("\n").find(line => line.startsWith(suffix));

                if (found) {
                    let breachTimes = found.split(":")[1];
                    leakResult.textContent = "Password has been leaked!";
                    breachCount.textContent = `Times found in breaches: ${breachTimes}`;
                    leakResult.style.color = "red";
                } else {
                    leakResult.textContent = "Password is safe.";
                    breachCount.textContent = "";
                    leakResult.style.color = "green";
                }
            } catch (error) {
                leakResult.textContent = "Error checking password leak.";
                leakResult.style.color = "red";
            }
        }


        function generateHash() {
            let password = document.getElementById("hashPassword").value;
            let hashResult = document.getElementById("hashResult");

            if (!password) {
                hashResult.textContent = "Please enter a password.";
                hashResult.style.color = "red";
                return;
            }

            generatedHash = CryptoJS.SHA256(password).toString();
            hashResult.textContent = generatedHash;
            hashResult.style.color = "white";
        }

        function copyHash() {
            if (!generatedHash || document.getElementById("hashPassword").value === "") {
                alert("Please generate SHA-256 hash first.");
                return;
            }

            navigator.clipboard.writeText(generatedHash).then(() => {
                let button = document.getElementById('copyHashButton'); 

                
                let originalText = button.innerText;
                let originalColor = button.style.backgroundColor;

                
                button.innerText = "Copied";
                button.style.backgroundColor = "#28a745"; 

                
                setTimeout(() => {
                    button.innerText = originalText;
                    button.style.backgroundColor = originalColor;
                }, 1000);
            }).catch(err => {
                console.error("Error copying hash: ", err);
            });
        }

    </script>



</body>

</html>
